#####################
ssplit-cpp$ git diff
diff --git a/CMakeLists.txt b/CMakeLists.txt
index 9ad8a39..c348eef 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt

-option(SSPLIT_USE_INTERNAL_PCRE2 "Use internal PCRE2 instead of system's." OFF)
+option(SSPLIT_USE_INTERNAL_PCRE2 "Use internal PCRE2 instead of system's." ON)

#####################
marian-dev$
-option(USE_MKL "Compile with MKL support" ON)
+option(USE_MKL "Compile with MKL support" OFF)
+# FIXME - not using BLAS
+set(USE_ONNX_SGEMM ON)
+set(USE_WASM_COMPATIBLE_SOURCE ON)

diff --git a/src/3rd_party/faiss/VectorTransform.h b/src/3rd_party/faiss/VectorTransform.h
index f0ed1440..03d19d84 100644
--- a/src/3rd_party/faiss/VectorTransform.h
+++ b/src/3rd_party/faiss/VectorTransform.h
@@ -21,7 +21,9 @@
 #if defined(__APPLE__) && !defined(__arm64__)
 #include <x86intrin.h>
 #endif
-
+#include <xmmintrin.h>
+#include <emmintrin.h>
+#include <pmmintrin.h>
 
 namespace faiss {


diff --git a/src/common/types.h b/src/common/types.h
index 6052896f..bcfccc9d 100644
--- a/src/common/types.h
+++ b/src/common/types.h
@@ -20,9 +20,10 @@
 
 #ifdef __AVX__
 #include <immintrin.h>
-#elif __SSE__
-#include <xmmintrin.h>
 #endif
+// IFDEF SSE?? FIXME
+#include <xmmintrin.h>
+#include <emmintrin.h>

#####################
sentencepiece$ git diff
diff --git a/third_party/absl/flags/flag.cc b/third_party/absl/flags/flag.cc
index 09ff78f..74b7c79 100644
--- a/third_party/absl/flags/flag.cc
+++ b/third_party/absl/flags/flag.cc
@@ -108,7 +108,7 @@ bool CommandLineGetFlag(int argc, char **argv, std::string *key,
 
 std::string PrintHelp(const char *programname) {
   std::ostringstream os;
-  os << PACKAGE_STRING << "\n\n";
+  os << "PACKAGE_STRING" << "\n\n";
   os << "Usage: " << programname << " [options] files\n\n";
 
   for (const auto *func : *GetFlagList()) {
@@ -211,7 +211,7 @@ std::vector<char *> ParseCommandLine(int argc, char *argv[]) {
     std::cout << internal::PrintHelp(argv[0]);
     sentencepiece::error::Exit(0);
   } else if (absl::GetFlag(FLAGS_version)) {
-    std::cout << PACKAGE_STRING << " " << VERSION << std::endl;
+    std::cout << "PACKAGE_STRING" << " " << "VERSION" << std::endl;
     sentencepiece::error::Exit(0);
   }
 
#####################

/bergamot-translator/3rd_party/marian-dev/src/3rd_party/intgemm$ git diff
diff --git a/intgemm/intgemm.cc b/intgemm/intgemm.cc
index 58e4bc5..47f938a 100644
--- a/intgemm/intgemm.cc
+++ b/intgemm/intgemm.cc
@@ -21,7 +21,8 @@ namespace {
 
 // Return the maximum CPU model that's found and supported at compile time.
 CPUType RealCPUID() {
-#if defined(WASM)
+// FIXME __get_cpuid_max not working
+#if defined(WASM) or true
   // emscripten does SSE4.1 but we only use up to SSSE3.
   return CPUType::SSSE3;
 #elif defined(__INTEL_COMPILER)

#####################

-> for this, need to clone `superlu` in the 
bergamot-translator/3rd_party/marian-dev/src/3rd_party/onnxjs/deps/eigen$ git diff
diff --git a/Eigen/SuperLUSupport b/Eigen/SuperLUSupport
index 59312a82d..d11d6fd27 100644
--- a/Eigen/SuperLUSupport
+++ b/Eigen/SuperLUSupport
@@ -17,9 +17,9 @@
 #endif
 
 typedef int int_t;
-#include <slu_Cnames.h>
-#include <supermatrix.h>
-#include <slu_util.h>
+#include <superlu/SRC/slu_Cnames.h>
+#include <superlu/SRC/supermatrix.h>
+#include <superlu/SRC/slu_util.h>
 
 // slu_util.h defines a preprocessor token named EMPTY which is really polluting,
 // so we remove it in favor of a SUPERLU_EMPTY token.
diff --git a/bench/spbench/test_sparseLU.cpp b/bench/spbench/test_sparseLU.cpp
index f8ecbe69b..b897fb0fb 100644
--- a/bench/spbench/test_sparseLU.cpp
+++ b/bench/spbench/test_sparseLU.cpp
@@ -87,7 +87,7 @@ int main(int argc, char **args)
   Matrix<scalar, Dynamic, 1> tmp2 = b - A*x;
   scalar tempNorm = tmp2.norm()/b.norm();
   cout << "Relative norm of the computed solution : " << tempNorm <<"\n";
-  cout << "Number of nonzeros in the factor : " << solver.nnzL() + solver.nnzU() << std::endl; 
-  
+  //cout << "Number of nonzeros in the factor : " << solver.nnzL() + solver.nnzU() << std::endl;
+  cout << "idk i dont need this" << std::endl;
   return 0;
 }

